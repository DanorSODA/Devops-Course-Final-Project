# Workflow name as displayed in GitHub Actions UI
name: Update K8s Deployment

# Define when this workflow will run
on:
  # Triggered by webhook from Docker Hub
  repository_dispatch:
    types: [docker-hub-update]
  # Allow manual trigger from GitHub UI
  workflow_dispatch:

jobs:
  update-deployment:
    runs-on: ubuntu-latest
    steps:
      # Checkout repository and submodules
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"

      # Install kubectl CLI tool
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      # Create SSH key file for master node access
      - name: Configure SSH
        run: |
          # Create private key file from GitHub secret
          echo "${{ secrets.K8S_SSH_PRIVATE_KEY }}" > k8s_key.pem
          # Set correct permissions for SSH key
          chmod 600 k8s_key.pem

      # Setup AWS credentials for accessing S3 state
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Extract master node IP from Terraform state
      - name: Get master IP
        run: |
          # Download and parse Terraform state file from S3
          MASTER_IP=$(aws s3 cp s3://DevOps-Tech-Courseterraform-state/k8s-cluster/terraform.tfstate - | jq -r '.outputs.master_public_ip.value')
          # Save IP to GitHub environment for later steps
          echo "MASTER_IP=$MASTER_IP" >> $GITHUB_ENV

      # Setup kubectl configuration
      - name: Setup kubeconfig
        run: |
          # Create kubectl config directory
          mkdir -p ~/.kube
          # Copy kubeconfig from master node using SSH
          scp -i k8s_key.pem -o StrictHostKeyChecking=no ubuntu@${MASTER_IP}:/etc/kubernetes/admin.conf ~/.kube/config
          # Set secure permissions on kubeconfig
          chmod 600 ~/.kube/config

      # Update the deployment to use new image
      - name: Restart deployment
        run: |
          # Trigger a rolling restart of the deployment
          kubectl rollout restart deployment face-detection-app
          # Wait for rollout to complete
          kubectl rollout status deployment face-detection-app
